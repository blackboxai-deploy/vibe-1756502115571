// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(STUDENT)
  bio           String?
  qualifications String?
  subjects      String?
  experience    Int?
  rating        Float?
  totalReviews  Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts        Account[]
  sessions        Session[]
  coursesCreated  Course[]     @relation("CourseTeacher")
  enrollments     Enrollment[]
  reviews         Review[]
  liveSessionsCreated LiveSession[] @relation("SessionTeacher")
  liveSessionsAttended LiveSession[] @relation("SessionStudents")
  messages        Message[]
  quizAttempts    QuizAttempt[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String     @id @default(cuid())
  title       String
  titleAr     String?
  description String
  descriptionAr String?
  price       Float      @default(0)
  currency    String     @default("USD")
  level       Level      @default(BEGINNER)
  category    String
  thumbnail   String?
  status      CourseStatus @default(DRAFT)
  language    String     @default("en")
  duration    Int?       // in minutes
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  teacherId   String
  teacher     User       @relation("CourseTeacher", fields: [teacherId], references: [id])
  
  lessons     Lesson[]
  enrollments Enrollment[]
  reviews     Review[]
  quizzes     Quiz[]
  liveSession LiveSession?
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  titleAr     String?
  description String?
  descriptionAr String?
  content     String?  // HTML content
  videoUrl    String?
  duration    Int?     // in minutes
  order       Int
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id          String   @id @default(cuid())
  progress    Float    @default(0)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  courseId    String
  user        User     @relation(fields: [userId], references: [id])
  course      Course   @relation(fields: [courseId], references: [id])
  
  @@unique([userId, courseId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  
  userId    String
  courseId  String
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  
  @@unique([userId, courseId])
}

model LiveSession {
  id          String   @id @default(cuid())
  title       String
  titleAr     String?
  description String?
  descriptionAr String?
  scheduledAt DateTime
  duration    Int      // in minutes
  meetingUrl  String?
  recordingUrl String?
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  teacherId   String
  courseId    String?  @unique
  teacher     User     @relation("SessionTeacher", fields: [teacherId], references: [id])
  course      Course?  @relation(fields: [courseId], references: [id])
  students    User[]   @relation("SessionStudents")
  messages    Message[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  
  userId    String
  sessionId String
  user      User        @relation(fields: [userId], references: [id])
  session   LiveSession @relation(fields: [sessionId], references: [id])
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  titleAr     String?
  description String?
  descriptionAr String?
  timeLimit   Int?     // in minutes
  passingScore Float   @default(70)
  createdAt   DateTime @default(now())
  
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions   Question[]
  attempts    QuizAttempt[]
}

model Question {
  id          String      @id @default(cuid())
  question    String
  questionAr  String?
  type        QuestionType @default(MULTIPLE_CHOICE)
  options     String?     // JSON array for multiple choice
  optionsAr   String?     // JSON array for Arabic options
  correctAnswer String
  explanation String?
  explanationAr String?
  points      Float       @default(1)
  
  quizId      String
  quiz        Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model QuizAttempt {
  id          String   @id @default(cuid())
  score       Float
  answers     String   // JSON object with answers
  completedAt DateTime @default(now())
  
  userId      String
  quizId      String
  user        User     @relation(fields: [userId], references: [id])
  quiz        Quiz     @relation(fields: [quizId], references: [id])
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
}